package ajbc.webService.rest.API_Demo.recorses;
import java.net.URI;
import java.util.List;
import java.util.UUID;

import ajbc.webService.rest.API_Demo.DBservice.IotThingDBService;
import ajbc.webService.rest.API_Demo.beans.IotThingFilterBean;
import ajbc.webService.rest.API_Demo.enums.Type;
import ajbc.webService.rest.API_Demo.models.IOTThing;
import jakarta.ws.rs.BeanParam;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.QueryParam;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.Response.Status;
import jakarta.ws.rs.core.UriInfo;


@Path("things")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class IOTThingResource {
	
	IotThingDBService database=new IotThingDBService();
	
	@GET
	public Response getAllIOTThing() {
		List<IOTThing> tempThingsList= database.getAllIOTThing();
		return Response.status(Status.CREATED).entity(tempThingsList).build();
	}
	
	
	@GET
	@Path("/{id}")
	public Response getThingById(@PathParam("id") UUID id) {
		IOTThing tempThing=database.getThingById(id);
		return  Response.status(Status.CREATED).entity(tempThing).build();
	}
	
	
	@GET
	public Response getIotThingByproperties(@BeanParam IotThingFilterBean filterBean) {

List<IOTThing> iotThings = database.getIotThingByproperties(filterBean.getType(),filterBean.getModle(),filterBean.getManufacturer());
		System.out.println(iotThings);
		return Response.ok().entity(iotThings).build();
	}

}
